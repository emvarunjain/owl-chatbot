version: '3.8'

services:
  # Infrastructure Services
  mongodb:
    image: mongo:7.0
    container_name: owl-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: owl
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - owl-network

  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: owl-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    networks:
      - owl-network

  redis:
    image: redis:7.2-alpine
    container_name: owl-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass password123
    networks:
      - owl-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: owl-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - owl-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: owl-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - owl-network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: owl-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - owl-network

  grafana:
    image: grafana/grafana:10.1.0
    container_name: owl-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./deploy/observability/grafana/dashboard-owl.json:/var/lib/grafana/dashboards/owl.json:ro
    networks:
      - owl-network

  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: owl-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - owl-network

  # API Gateway
  kong:
    image: kong:3.4
    container_name: owl-kong
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./deploy/gateway/kong.yml:/kong/kong.yml:ro
    networks:
      - owl-network

  # Microservices
  owl-tenant-service:
    build:
      context: .
      dockerfile: services/tenant-service/Dockerfile
    container_name: owl-tenant-service
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:password123@mongodb:27017/owl?authSource=admin
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PASSWORD: password123
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      - mongodb
      - redis
      - kafka
    networks:
      - owl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  owl-chat-service:
    build:
      context: .
      dockerfile: services/chat-service/Dockerfile
    container_name: owl-chat-service
    restart: unless-stopped
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:password123@mongodb:27017/owl?authSource=admin
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PASSWORD: password123
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      QDRANT_URL: http://qdrant:6333
      TENANT_SERVICE_URL: http://owl-tenant-service:8080
      RETRIEVAL_SERVICE_URL: http://owl-retrieval-service:8080
      SAFETY_SERVICE_URL: http://owl-safety-service:8080
      MODEL_PROXY_SERVICE_URL: http://owl-model-proxy-service:8080
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      - mongodb
      - redis
      - kafka
      - qdrant
      - owl-tenant-service
    networks:
      - owl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  owl-retrieval-service:
    build:
      context: .
      dockerfile: services/retrieval-service/Dockerfile
    container_name: owl-retrieval-service
    restart: unless-stopped
    ports:
      - "8083:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      QDRANT_URL: http://qdrant:6333
      TENANT_SERVICE_URL: http://owl-tenant-service:8080
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      - qdrant
      - kafka
      - owl-tenant-service
    networks:
      - owl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  owl-ingestion-service:
    build:
      context: .
      dockerfile: services/ingestion-service/Dockerfile
    container_name: owl-ingestion-service
    restart: unless-stopped
    ports:
      - "8084:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:password123@mongodb:27017/owl?authSource=admin
      QDRANT_URL: http://qdrant:6333
      TENANT_SERVICE_URL: http://owl-tenant-service:8080
      SAFETY_SERVICE_URL: http://owl-safety-service:8080
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      - mongodb
      - qdrant
      - kafka
      - owl-tenant-service
    networks:
      - owl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  owl-model-proxy-service:
    build:
      context: .
      dockerfile: services/model-proxy/Dockerfile
    container_name: owl-model-proxy-service
    restart: unless-stopped
    ports:
      - "8085:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PASSWORD: password123
      TENANT_SERVICE_URL: http://owl-tenant-service:8080
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      - redis
      - kafka
      - owl-tenant-service
    networks:
      - owl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  owl-safety-service:
    build:
      context: .
      dockerfile: services/safety-service/Dockerfile
    container_name: owl-safety-service
    restart: unless-stopped
    ports:
      - "8086:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PASSWORD: password123
      TENANT_SERVICE_URL: http://owl-tenant-service:8080
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      - redis
      - kafka
      - owl-tenant-service
    networks:
      - owl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  owl-connector-service:
    build:
      context: .
      dockerfile: services/connector-service/Dockerfile
    container_name: owl-connector-service
    restart: unless-stopped
    ports:
      - "8087:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:password123@mongodb:27017/owl?authSource=admin
      TENANT_SERVICE_URL: http://owl-tenant-service:8080
      INGESTION_SERVICE_URL: http://owl-ingestion-service:8080
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      - mongodb
      - kafka
      - owl-tenant-service
    networks:
      - owl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Model Services
  ollama:
    image: ollama/ollama:latest
    container_name: owl-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
    networks:
      - owl-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  mongodb_data:
  qdrant_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  prometheus_data:
  grafana_data:
  ollama_data:

networks:
  owl-network:
    driver: bridge
