openapi: 3.0.3
info:
  title: OWL Chatbot API
  description: |
    OWL (Open Web Language) is a multi-tenant RAG (Retrieval-Augmented Generation) chatbot platform
    that provides intelligent document search and conversational AI capabilities for enterprises.
    
    ## Features
    - Multi-tenant architecture with isolated data and configurations
    - Vector-based document search and retrieval
    - Support for multiple AI model providers (OpenAI, Azure OpenAI, Ollama, AWS Bedrock)
    - Document ingestion from various sources (files, URLs, connectors)
    - Content safety and guardrails
    - Rate limiting and quota management
    - Comprehensive audit logging and monitoring
    
    ## Authentication
    All API endpoints require authentication using API keys. Include your API key in the Authorization header:
    ```
    Authorization: Bearer your-api-key-here
    ```
    
    ## Rate Limiting
    API requests are rate-limited per tenant. Current limits:
    - 120 requests per minute for standard plans
    - Higher limits available for premium plans
    
    ## Error Handling
    The API uses standard HTTP status codes and returns error details in JSON format:
    ```json
    {
      "error": "error_code",
      "message": "Human readable error message",
      "details": "Additional error details"
    }
    ```
  version: 3.0.0
  contact:
    name: OWL Support
    email: support@owl-chatbot.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.owl-chatbot.com
    description: Production server
  - url: https://staging-api.owl-chatbot.com
    description: Staging server
  - url: http://localhost:8080
    description: Local development server

security:
  - BearerAuth: []

paths:
  /api/v1/chat:
    post:
      tags:
        - Chat
      summary: Send a chat message
      description: |
        Send a message to the chatbot and receive an AI-generated response.
        The response may include relevant document sources if found in the knowledge base.
      operationId: sendChatMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
            examples:
              simple_question:
                summary: Simple question
                value:
                  tenantId: "acme-corp"
                  question: "What is our company policy on remote work?"
                  allowWeb: false
              question_with_fallback:
                summary: Question with web fallback
                value:
                  tenantId: "acme-corp"
                  question: "What are the latest developments in AI?"
                  allowWeb: true
                  fallback:
                    enabled: true
                    budgetUsd: 0.01
                    maxWebCalls: 3
      responses:
        '200':
          description: Chat response generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
              examples:
                successful_response:
                  summary: Successful response with sources
                  value:
                    answer: "Based on our company policy, remote work is allowed up to 3 days per week. This policy was updated in January 2024."
                    sources: ["hr-policy-2024.pdf", "remote-work-guidelines.pdf"]
                    chatId: "chat-12345"
                    safety: "SAFE"
                no_knowledge_response:
                  summary: Response when no relevant knowledge found
                  value:
                    answer: "I don't know based on the provided knowledge."
                    sources: []
                    chatId: "chat-12346"
                    safety: "SAFE"
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - invalid or missing API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/chat/history/{tenantId}:
    get:
      tags:
        - Chat
      summary: Get chat history for a tenant
      description: Retrieve the chat history for a specific tenant
      operationId: getChatHistory
      parameters:
        - name: tenantId
          in: path
          required: true
          description: The tenant ID
          schema:
            type: string
            example: "acme-corp"
        - name: limit
          in: query
          description: Maximum number of chat records to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of chat records to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Chat history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  chats:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatRecord'
                  total:
                    type: integer
                    description: Total number of chat records
                  hasMore:
                    type: boolean
                    description: Whether there are more records available
        '401':
          description: Unauthorized
        '404':
          description: Tenant not found

  /api/v1/ingest/file:
    post:
      tags:
        - Ingestion
      summary: Upload and ingest a file
      description: |
        Upload a file (PDF, DOC, DOCX, TXT, etc.) to be processed and added to the knowledge base.
        The file will be parsed, chunked, and vectorized for search.
      operationId: ingestFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - tenantId
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload
                tenantId:
                  type: string
                  description: The tenant ID
                  example: "acme-corp"
                filename:
                  type: string
                  description: Optional custom filename
                metadata:
                  type: object
                  description: Additional metadata for the document
                  additionalProperties: true
      responses:
        '200':
          description: File ingested successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                    description: Unique job identifier for tracking ingestion progress
                  status:
                    type: string
                    enum: [queued, processing, completed, failed]
                  message:
                    type: string
                    description: Status message
        '400':
          description: Bad request - invalid file or parameters
        '413':
          description: File too large
        '415':
          description: Unsupported file type

  /api/v1/ingest/url:
    post:
      tags:
        - Ingestion
      summary: Ingest content from a URL
      description: |
        Extract and ingest content from a web URL. The system will fetch the content,
        parse it, and add it to the knowledge base.
      operationId: ingestUrl
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
                - tenantId
              properties:
                url:
                  type: string
                  format: uri
                  description: The URL to ingest
                  example: "https://example.com/documentation"
                tenantId:
                  type: string
                  description: The tenant ID
                  example: "acme-corp"
                metadata:
                  type: object
                  description: Additional metadata for the document
                  additionalProperties: true
      responses:
        '200':
          description: URL ingested successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                  status:
                    type: string
                    enum: [queued, processing, completed, failed]
                  message:
                    type: string

  /api/v1/ingest/status/{jobId}:
    get:
      tags:
        - Ingestion
      summary: Get ingestion job status
      description: Check the status of an ingestion job
      operationId: getIngestionStatus
      parameters:
        - name: jobId
          in: path
          required: true
          description: The job ID
          schema:
            type: string
      responses:
        '200':
          description: Job status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                  status:
                    type: string
                    enum: [queued, processing, completed, failed]
                  progress:
                    type: integer
                    minimum: 0
                    maximum: 100
                    description: Progress percentage
                  message:
                    type: string
                  documentsProcessed:
                    type: integer
                    description: Number of documents processed
                  errors:
                    type: array
                    items:
                      type: string
                    description: Any errors encountered during processing

  /api/v1/tenants:
    post:
      tags:
        - Tenants
      summary: Create a new tenant
      description: Create a new tenant with the specified configuration
      operationId: createTenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantCreateRequest'
      responses:
        '201':
          description: Tenant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '400':
          description: Bad request - invalid input
        '409':
          description: Tenant ID already exists

    get:
      tags:
        - Tenants
      summary: List tenants
      description: Retrieve a list of tenants with pagination
      operationId: listTenants
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Tenants retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tenants:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tenant'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  currentPage:
                    type: integer

  /api/v1/tenants/{tenantId}:
    get:
      tags:
        - Tenants
      summary: Get tenant details
      description: Retrieve detailed information about a specific tenant
      operationId: getTenant
      parameters:
        - name: tenantId
          in: path
          required: true
          description: The tenant ID
          schema:
            type: string
      responses:
        '200':
          description: Tenant details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '404':
          description: Tenant not found

    put:
      tags:
        - Tenants
      summary: Update tenant
      description: Update tenant information
      operationId: updateTenant
      parameters:
        - name: tenantId
          in: path
          required: true
          description: The tenant ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Updated tenant name
                settings:
                  type: object
                  description: Updated tenant settings
                  additionalProperties: true
      responses:
        '200':
          description: Tenant updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '404':
          description: Tenant not found

    delete:
      tags:
        - Tenants
      summary: Delete tenant
      description: Delete a tenant and all associated data
      operationId: deleteTenant
      parameters:
        - name: tenantId
          in: path
          required: true
          description: The tenant ID
          schema:
            type: string
      responses:
        '204':
          description: Tenant deleted successfully
        '404':
          description: Tenant not found

  /api/v1/tenants/{tenantId}/api-keys:
    post:
      tags:
        - API Keys
      summary: Create API key
      description: Create a new API key for the tenant
      operationId: createApiKey
      parameters:
        - name: tenantId
          in: path
          required: true
          description: The tenant ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Human-readable name for the API key
                permissions:
                  type: array
                  items:
                    type: string
                  description: List of permissions for the API key
                expiresAt:
                  type: string
                  format: date-time
                  description: Optional expiration date
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
                    description: The generated API key (only shown once)
                  keyId:
                    type: string
                    description: Unique identifier for the API key
                  name:
                    type: string
                  permissions:
                    type: array
                    items:
                      type: string
                  createdAt:
                    type: string
                    format: date-time
                  expiresAt:
                    type: string
                    format: date-time

    get:
      tags:
        - API Keys
      summary: List API keys
      description: List all API keys for a tenant
      operationId: listApiKeys
      parameters:
        - name: tenantId
          in: path
          required: true
          description: The tenant ID
          schema:
            type: string
      responses:
        '200':
          description: API keys retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    keyId:
                      type: string
                    name:
                      type: string
                    permissions:
                      type: array
                      items:
                        type: string
                    createdAt:
                      type: string
                      format: date-time
                    expiresAt:
                      type: string
                      format: date-time
                    lastUsed:
                      type: string
                      format: date-time

  /api/v1/connectors:
    post:
      tags:
        - Connectors
      summary: Create connector
      description: Create a new data source connector
      operationId: createConnector
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tenantId
                - type
                - config
              properties:
                tenantId:
                  type: string
                  description: The tenant ID
                type:
                  type: string
                  enum: [gdrive, sharepoint, confluence, webhook]
                  description: Type of connector
                config:
                  type: object
                  description: Connector-specific configuration
                  additionalProperties: true
      responses:
        '201':
          description: Connector created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  tenantId:
                    type: string
                  type:
                    type: string
                  status:
                    type: string
                    enum: [created, running, stopped, error]
                  config:
                    type: object
                  createdAt:
                    type: string
                    format: date-time

    get:
      tags:
        - Connectors
      summary: List connectors
      description: List connectors for a tenant
      operationId: listConnectors
      parameters:
        - name: tenantId
          in: query
          required: true
          description: The tenant ID
          schema:
            type: string
      responses:
        '200':
          description: Connectors retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    tenantId:
                      type: string
                    type:
                      type: string
                    status:
                      type: string
                    config:
                      type: object
                    createdAt:
                      type: string
                      format: date-time
                    lastSync:
                      type: string
                      format: date-time

  /api/v1/connectors/{connectorId}/sync:
    post:
      tags:
        - Connectors
      summary: Trigger connector sync
      description: Manually trigger a sync for a connector
      operationId: syncConnector
      parameters:
        - name: connectorId
          in: path
          required: true
          description: The connector ID
          schema:
            type: string
      responses:
        '200':
          description: Sync triggered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  syncId:
                    type: string
        '404':
          description: Connector not found

  /api/v1/search:
    post:
      tags:
        - Search
      summary: Search documents
      description: |
        Search for documents in the knowledge base using semantic similarity.
        Returns ranked results with relevance scores.
      operationId: searchDocuments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tenantId
                - query
              properties:
                tenantId:
                  type: string
                  description: The tenant ID
                query:
                  type: string
                  description: Search query
                limit:
                  type: integer
                  minimum: 1
                  maximum: 50
                  default: 10
                  description: Maximum number of results to return
                scope:
                  type: string
                  description: Optional scope to limit search (filename, URL, etc.)
                filters:
                  type: object
                  description: Additional filters to apply
                  additionalProperties: true
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        content:
                          type: string
                        score:
                          type: number
                          description: Relevance score (0-1)
                        metadata:
                          type: object
                          additionalProperties: true
                        source:
                          type: string
                          description: Source document identifier
                  total:
                    type: integer
                    description: Total number of matching documents
                  query:
                    type: string
                    description: The search query used

  /api/v1/health:
    get:
      tags:
        - System
      summary: Health check
      description: Check the health status of the API
      operationId: healthCheck
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [UP, DOWN]
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                  services:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                          enum: [UP, DOWN]
                        details:
                          type: object

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        API key authentication. Include your API key in the Authorization header:
        ```
        Authorization: Bearer your-api-key-here
        ```

  schemas:
    ChatRequest:
      type: object
      required:
        - tenantId
        - question
      properties:
        tenantId:
          type: string
          description: The tenant ID
          example: "acme-corp"
        question:
          type: string
          description: The user's question or message
          example: "What is our company policy on remote work?"
        allowWeb:
          type: boolean
          description: Whether to allow web search as fallback
          default: false
        document:
          type: string
          description: Optional document scope for the question
          example: "hr-policy.pdf"
        fallback:
          $ref: '#/components/schemas/FallbackPolicy'

    FallbackPolicy:
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether fallback is enabled
          default: false
        budgetUsd:
          type: number
          format: double
          description: Maximum budget in USD for fallback operations
          example: 0.01
        maxWebCalls:
          type: integer
          description: Maximum number of web search calls
          minimum: 1
          maximum: 10
          default: 2

    ChatResponse:
      type: object
      required:
        - answer
        - sources
        - chatId
        - safety
      properties:
        answer:
          type: string
          description: The AI-generated response
          example: "Based on our company policy, remote work is allowed up to 3 days per week."
        sources:
          type: array
          items:
            type: string
          description: List of source documents used in the response
          example: ["hr-policy-2024.pdf", "remote-work-guidelines.pdf"]
        chatId:
          type: string
          description: Unique identifier for this chat interaction
          example: "chat-12345"
        safety:
          type: string
          enum: [SAFE, REFUSE, REVIEW]
          description: Safety classification of the response
          example: "SAFE"

    ChatRecord:
      type: object
      properties:
        id:
          type: string
        tenantId:
          type: string
        question:
          type: string
        answer:
          type: string
        sources:
          type: array
          items:
            type: string
        safety:
          type: string
          enum: [SAFE, REFUSE, REVIEW]
        createdAt:
          type: string
          format: date-time
        cached:
          type: boolean
          description: Whether the response was from cache

    Tenant:
      type: object
      properties:
        id:
          type: string
        tenantId:
          type: string
          description: Unique tenant identifier
          example: "acme-corp"
        name:
          type: string
          description: Human-readable tenant name
          example: "Acme Corporation"
        settings:
          type: object
          description: Tenant-specific settings
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TenantCreateRequest:
      type: object
      required:
        - tenantId
        - name
      properties:
        tenantId:
          type: string
          description: Unique tenant identifier
          example: "acme-corp"
        name:
          type: string
          description: Human-readable tenant name
          example: "Acme Corporation"
        settings:
          type: object
          description: Initial tenant settings
          additionalProperties: true

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
          example: "INVALID_REQUEST"
        message:
          type: string
          description: Human-readable error message
          example: "The request is invalid"
        details:
          type: string
          description: Additional error details
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          description: API path that caused the error

  examples:
    ChatRequestExample:
      summary: Example chat request
      value:
        tenantId: "acme-corp"
        question: "What is our company policy on remote work?"
        allowWeb: false
        fallback:
          enabled: true
          budgetUsd: 0.01
          maxWebCalls: 2

    ChatResponseExample:
      summary: Example chat response
      value:
        answer: "Based on our company policy, remote work is allowed up to 3 days per week. This policy was updated in January 2024 and applies to all full-time employees."
        sources: ["hr-policy-2024.pdf", "remote-work-guidelines.pdf"]
        chatId: "chat-12345"
        safety: "SAFE"

    ErrorExample:
      summary: Example error response
      value:
        error: "RATE_LIMIT_EXCEEDED"
        message: "Rate limit exceeded. Please try again later."
        details: "You have exceeded the rate limit of 120 requests per minute."
        timestamp: "2024-01-15T10:30:00Z"
        path: "/api/v1/chat"

tags:
  - name: Chat
    description: Chat and conversation management
  - name: Ingestion
    description: Document ingestion and processing
  - name: Tenants
    description: Tenant management
  - name: API Keys
    description: API key management
  - name: Connectors
    description: Data source connectors
  - name: Search
    description: Document search and retrieval
  - name: System
    description: System health and monitoring
